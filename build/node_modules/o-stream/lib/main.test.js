"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("./main");
describe("transform", function () {
    it("When writing a number, it enters as the data.", function () {
        var actual;
        var stream = main_1.default.transform({
            onEntered: function (args) {
                actual = args.object;
            }
        });
        stream.write(4);
        stream.end();
        expect(actual).toBe(4);
    });
    it("When writing a number, and transforming it, then output the transformed data.", function () {
        var increamentStream = main_1.default.transform({
            onEntered: function (args) {
                args.output.push(args.object + 1);
            }
        });
        var num = 4;
        var expected = num + 1;
        increamentStream.write(num);
        var actual = increamentStream.read();
        expect(actual).toBe(expected);
    });
    it("When writing data to output on 'ended', then data can be consumed.", function () {
        var sum = 0;
        var sumStream = main_1.default.transform({
            onEntered: function (args) {
                sum += args.object;
            },
            onEnded: function (args) {
                args.output.push(sum);
            }
        });
        var num1 = 4;
        var num2 = 6;
        var num3 = -1;
        var expected = num1 + num2 + num3;
        sumStream.write(num1);
        sumStream.write(num2);
        sumStream.write(num3);
        sumStream.end();
        var actual = sumStream.read();
        expect(actual).toBe(expected);
    });
    it("When onEnterAsync and onEndedAsync, then working.", function () {
        var sum = 0;
        var sumStream = main_1.default.transform({
            onEnteredAsync: function (args) {
                sum += args.object;
                args.done();
            },
            onEndedAsync: function (args) {
                args.output.push(sum);
                args.done();
            }
        });
        var num1 = 4;
        var num2 = 6;
        var num3 = -1;
        var expected = num1 + num2 + num3;
        sumStream.write(num1);
        sumStream.write(num2);
        sumStream.write(num3);
        sumStream.end();
        var actual = sumStream.read();
        expect(actual).toBe(expected);
    });
    it("When piping, data is transfered.", function (done) {
        var arr = [1, 9, 7];
        var i = 0;
        var stream = main_1.default.fromArray(arr)
            .pipe(main_1.default.transform({
            onEntered: function (args) {
                args.output.push(args.object + 1);
            }
        }))
            .pipe(main_1.default.transform({
            onEntered: function (args) {
                expect(args.object).toBe(arr[i++] + 1);
            },
            onEnded: function (args) {
                expect(i).toBe(arr.length);
                done();
            }
        }));
    });
});
describe("fromArray", function () {
    it("Numbers array.", function () {
        var arr = [1, 9, 7];
        var stream = main_1.default.fromArray(arr);
        expect(stream.read()).toBe(arr[0]);
        expect(stream.read()).toBe(arr[1]);
        expect(stream.read()).toBe(arr[2]);
        expect(stream.read()).toBe(null);
    });
});
