"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EnteredArgs_1 = require("./EnteredArgs");
var EndedArgs_1 = require("./EndedArgs");
var stream_1 = require("stream");
var ObjectTransform = (function (_super) {
    __extends(ObjectTransform, _super);
    function ObjectTransform(args) {
        var _this = _super.call(this, { objectMode: true }) || this;
        args = args || {};
        _this.initEnteredAsync(args);
        _this.initEndedAsync(args);
        return _this;
    }
    ObjectTransform.prototype._transform = function (chunk, encoding, callback) {
        this.enteredAsync(new EnteredArgs_1.EnteredAsyncArgs(chunk, this, callback));
    };
    ObjectTransform.prototype._flush = function (callback) {
        this.endedAsync(new EndedArgs_1.EndedAsyncArgs(this, callback));
    };
    ObjectTransform.prototype.initEnteredAsync = function (params) {
        if (params.onEntered && params.onEnteredAsync) {
            throw new Error("only one of the 'entered' methods can be asigned.");
        }
        this.enteredAsync = params.onEnteredAsync ? params.onEnteredAsync : null ||
            params.onEntered ? this.getOnEnteredAsAsync(params.onEntered) : null ||
            this.passThroughAsync;
    };
    ObjectTransform.prototype.initEndedAsync = function (params) {
        if (params.onEnded && params.onEndedAsync) {
            throw new Error("only one of the 'all processed' methods can be asigned.");
        }
        if (params.onEnded) {
            this.endedAsync = this.getOnEndedAsAsync(params.onEnded);
        }
        else {
            this.endedAsync = params.onEndedAsync || this.finishAsync;
        }
    };
    ObjectTransform.prototype.getOnEnteredAsAsync = function (onEntered) {
        return function (args) {
            try {
                onEntered(args);
                args.done();
            }
            catch (error) {
                console.log("error");
                args.failed(error);
            }
        };
    };
    ObjectTransform.prototype.getOnEndedAsAsync = function (onEnded) {
        return function (args) {
            try {
                onEnded(args);
                args.done();
            }
            catch (error) {
                args.failed(error);
            }
        };
    };
    ObjectTransform.prototype.passThroughAsync = function (args) {
        args.output.push(args.object);
        args.done();
    };
    ObjectTransform.prototype.finishAsync = function (args) {
        args.done();
    };
    return ObjectTransform;
}(stream_1.Transform));
exports.ObjectTransform = ObjectTransform;
